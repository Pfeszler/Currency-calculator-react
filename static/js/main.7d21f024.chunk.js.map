{"version":3,"sources":["Container/index.js","Header/index.js","Main/index.js","Form/index.js","Table/index.js","Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","children","className","Header","alt","src","Main","Form","currencies","useState","buy","setBuy","amount","setAmount","id","currencySelected","setCurrencySelected","answer","setAnswer","calculateFinalValue","Number","buyprice","toFixed","Fragment","onSubmit","event","preventDefault","symbol","type","name","required","checked","onChange","value","target","map","currency","key","min","Table","sellprice","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d21f024.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./style.css\"\r\n\r\n\r\nconst Container = ({children}) => \r\n    <div className=\"container\">\r\n        {children}\r\n    </div>\r\n\r\n\r\nexport default Container","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Header = () => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header__text\">Kantor wymiany walut</h1>\r\n        <img className=\"header__logo\" alt=\"logo\" src=\"https://cdn.onlinewebfonts.com/svg/img_353628.png\" />\r\n      </header>\r\n)\r\n\r\nexport default Header","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Main = ({children}) =>\r\n<main className=\"main\">\r\n    {children}\r\n</main>\r\n\r\nexport default Main","import React, { useState } from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Form = ({ currencies }) => {\r\n    const [buy, setBuy] = useState(true)\r\n    const [amount, setAmount] = useState(\"\")\r\n    const [currencySelected, setCurrencySelected] = useState(currencies[0].id)\r\n    const [answer, setAnswer] = useState(\"\")\r\n    const onBuyChange = () =>\r\n        setBuy(true);\r\n\r\n    const onSellChange = () =>\r\n        setBuy(false)\r\n\r\n    const calculateFinalValue = () => {\r\n        if (buy) {\r\n            return (Number(amount) / currencies[currencySelected].buyprice).toFixed(2)\r\n        }\r\n        return (Number(amount) * currencies[currencySelected].buyprice).toFixed(2)\r\n    }\r\n\r\n    const onFormSubmit = () =>\r\n        setAnswer(`Na rachunek powiązany z Twoim kontem zostało przelane\r\n         ${calculateFinalValue()} ${buy ? currencies[currencySelected].symbol : \"PLN\"} `)\r\n\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <form className=\"form\"\r\n                onSubmit={(event) => {\r\n                    event.preventDefault();\r\n                    onFormSubmit()\r\n                }\r\n                }>\r\n                <fieldset className=\"form__fieldset\">\r\n                    <legend className=\"form__legend\">Co chcesz zrobić?</legend>\r\n                    <div className=\"form__flexbox\">\r\n                        <ul className=\"form__inputList\">\r\n\r\n                            <li>\r\n                                <label>\r\n                                    <input type=\"radio\"\r\n                                        name=\"what-you-gona-do\"\r\n                                        required\r\n                                        checked={buy}\r\n                                        onChange={() => {\r\n                                            onBuyChange();\r\n                                            setAnswer(\"\");\r\n                                        }}\r\n                                    />\r\n                                    <span className=\"form__discription\">Kupuję</span>\r\n                                </label>\r\n                            </li>\r\n                            <li>\r\n                                <label>\r\n                                    <input type=\"radio\"\r\n                                        name=\"what-you-gona-do\"\r\n                                        checked={!buy}\r\n                                        onChange={() => {\r\n                                            onSellChange()\r\n                                            setAnswer(\"\");\r\n                                        }}\r\n                                        required />\r\n                                    <span className=\"form__discription\">Sprzedaję</span>\r\n                                </label>\r\n                            </li>\r\n                        </ul>\r\n                        <div className=\"form__inputContainer\">\r\n                            <label>\r\n                                <span className=\"form__discription\">\r\n                                    Wybierz walutę\r\n                            </span>\r\n                                <select className=\"form__input\"\r\n                                    required\r\n                                    name=\"currency\"\r\n                                    value={currencySelected}\r\n                                    onChange={({ target }) => {\r\n                                        setCurrencySelected(target.value);\r\n                                        setAnswer(\"\");\r\n                                    }}>\r\n                                    {currencies.map(currency =>\r\n                                        <option\r\n                                            value={currency.id}\r\n                                            key={currency.symbol}>\r\n                                            {currency.name}\r\n                                        </option>\r\n                                    )}\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form__inputContainer\">\r\n                            <label>\r\n                                <span className=\"form__discription\">\r\n                                    Chcę wymienić <strong>({buy ? \"PLN\" : currencies[currencySelected].symbol})</strong>\r\n                                </span>\r\n                                <input className=\"form__input\"\r\n                                    name=\"to-exchange\"\r\n                                    required\r\n                                    type=\"number\"\r\n                                    min=\"1\"\r\n                                    value={amount}\r\n                                    onChange={({ target }) => {\r\n                                        setAmount(target.value);\r\n                                        setAnswer(\"\");\r\n                                    }}\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n                <div className=\"form__text\">\r\n                    <p>\r\n                        Otrzymasz <strong>{calculateFinalValue()} ({buy ? currencies[currencySelected].symbol : \"PLN\"})\r\n\r\n                                    </strong>\r\n                    </p>\r\n                    <p className=\"form__paragraph\"> </p>\r\n                </div>\r\n                <button className=\"form__button\">Wymień</button>\r\n            </form>\r\n            <p className=\"form__answer\">\r\n                {answer}\r\n            </p>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default Form","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Table = ({ currencies }) => (\r\n    <section className=\"table\">\r\n        <table className=\"table__container\">\r\n            <caption className=\"table__caption\">\r\n                Tabela kursów walut\r\n                </caption>\r\n            <thead>\r\n                <tr>\r\n                    <th className=\"table__header table__cell\">Waluta</th>\r\n                    <th className=\"table__header table__cell\">Kupno</th>\r\n                    <th className=\"table__header table__cell\">Sprzedaż</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody className=\"\">\r\n                {currencies.map(currency =>\r\n                    <tr key={currency.name}>\r\n                        <th className=\"table__header table__cell\">{currency.name}</th>\r\n                        <td className=\"table__cell\">{currency.buyprice}</td>\r\n                        <td className=\"table__cell\">{currency.sellprice}</td>\r\n                    </tr>\r\n\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    </section>\r\n)\r\n\r\nexport default Table","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\n\r\nconst Footer = () => \r\n<footer className=\"footer\">\r\n<p className=\"footer__text\">\r\n  Nie jesteśmy prawdziwym kantorem. ale i tak możesz przesłać nam pieniądze. Gwarantujemy. że ich nie\r\n  odzyskasz!\r\n</p>\r\n</footer>\r\n\r\nexport default Footer","import React from 'react';\nimport Container from \"./Container\"\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Form from \"./Form\";\nimport Table from \"./Table\";\nimport Footer from \"./Footer\";\n\nconst currencies = [\n  { id: 0, name: \"dolar amerykański\", symbol: \"USD\", buyprice: 3.9384, sellprice: 4.0180 },\n  { id: 1, name: \"euro\", symbol: \"EUR\", buyprice: 4.4189, sellprice: 4.5081 },\n  { id: 2, name: \"funt brytyjski\", symbol: \"GPB\", buyprice: 4.9386, sellprice: 5.0384 },\n  { id: 3, name: \"frank szwajcarski\", symbol: \"CHF\", buyprice: 4.1437, sellprice: 4.2275 },\n  { id: 4, name: \"korona norweska\", symbol: \"NOK\", buyprice: 0.4113, sellprice: 0.4197 },\n  { id: 5, name: \"korona czeska\", symbol: \"CZK\", buyprice: 0.1660, sellprice: 0.1694 },\n];\n\n\n\nfunction App() {\n  return (\n    <Container>\n      <Header />\n      <Main>\n        <Form currencies={currencies} />\n        <Table currencies={currencies} />\n      </Main>\n      <Footer />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}